from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from db import get_all_machines, update_machine_full_price, update_machine_deal_type, update_machine_1c, update_machine_rent_price, get_payments_by_machine, get_all_machine_models, get_last_payment_date
from datetime import date, timedelta

router = Router()

async def get_client_info(machine):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ"""
    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã –¥–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    models = {m.name: m for m in await get_all_machine_models()}
    full_price = machine.full_price if machine.full_price else (models[machine.model].full_price if machine.model in models else 0)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
    all_payments = await get_payments_by_machine(machine.id)
    total_paid = sum(p.amount for p in all_payments) + (machine.deposit if machine.deposit else 0)
    remaining = max(full_price - total_paid, 0)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    last_payment_date = await get_last_payment_date(machine.id)
    if last_payment_date is None:
        last_payment_date = machine.start_date
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    next_payment_date = last_payment_date + timedelta(days=32)
    days_left = (next_payment_date - date.today()).days
    
    # –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    if days_left < 0:
        payment_status = f"üî¥ –ü–†–û–®–õ–ê ({abs(days_left)} –¥–Ω. –Ω–∞–∑–∞–¥)"
    elif days_left == 0:
        payment_status = "üî¥ –°–ï–ì–û–î–ù–Ø –ü–õ–ê–¢–ï–ñ!"
    elif days_left <= 3:
        payment_status = f"üü° –ß–µ—Ä–µ–∑ {days_left} –¥–Ω—è"
    elif days_left <= 7:
        payment_status = f"üü† –ß–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π"
    else:
        payment_status = f"üü¢ –ß–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π"
    
    info = f"üë§ **{machine.tenant}**\n"
    info += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {machine.phone}\n"
    info += f"‚òïÔ∏è –ú–æ–¥–µ–ª—å: {machine.model}\n"
    info += f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {machine.start_date}\n"
    info += f"üí∞ –ê—Ä–µ–Ω–¥–∞: {machine.rent_price}\n"
    info += f"üí≥ –î–µ–ø–æ–∑–∏—Ç: {machine.deposit}\n"
    info += f"üíµ –ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã: {full_price}\n"
    info += f"üìä –¢–∏–ø —Å–¥–µ–ª–∫–∏: {machine.deal_type}\n"
    info += f"üè¢ 1–° —Å—Ç–∞—Ç—É—Å: {'‚úÖ –í 1–°' if machine.in_1C else '‚ùå –ë–µ–∑ 1–°'}\n"
    info += f"üí∏ –£–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ —Å –¥–µ–ø–æ–∑–∏—Ç–æ–º: {total_paid}\n"
    info += f"‚öñÔ∏è –û—Å—Ç–∞—Ç–æ–∫: {remaining}\n"
    info += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂: {last_payment_date}\n"
    info += f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: {next_payment_date}\n"
    info += f"üìä –°—Ç–∞—Ç—É—Å: {payment_status}\n"
    
    if machine.comment:
        info += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {machine.comment}\n"
    
    return info

class EditFSM(StatesGroup):
    select_machine = State()
    action = State()
    new_price = State()
    new_deal_type = State()
    new_1c = State()
    new_rent = State()

@router.message(Command("clients"))
async def show_clients(msg: Message, state: FSMContext):
    machines = await get_all_machines()
    active_machines = [m for m in machines if m.status == "active"]
    
    if not active_machines:
        await msg.answer("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    kb_buttons = []
    for m in active_machines:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
        all_payments = await get_payments_by_machine(m.id)
        total_paid = sum(p.amount for p in all_payments) + (m.deposit if m.deposit else 0)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        last_payment_date = await get_last_payment_date(m.id)
        if last_payment_date is None:
            last_payment_date = m.start_date
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        next_payment_date = last_payment_date + timedelta(days=32)
        days_left = (next_payment_date - date.today()).days
        
        # –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        if days_left < 0:
            payment_status = f"üî¥ –ü–†–û–®–õ–ê"
        elif days_left == 0:
            payment_status = f"üî¥ –°–ï–ì–û–î–ù–Ø"
        elif days_left <= 3:
            payment_status = f"üü° {days_left}–¥"
        elif days_left <= 7:
            payment_status = f"üü† {days_left}–¥"
        else:
            payment_status = f"üü¢ {days_left}–¥"
        
        button_text = f"{m.tenant} | {m.model} | {payment_status} | {m.rent_price}‚Ç∏"
        kb_buttons.append([InlineKeyboardButton(text=button_text, callback_data=f"client_{m.id}")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
    
    summary_text = f"üìã **–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã ({len(active_machines)})**\n\n"
    summary_text += f"üî¥ –ü–†–û–®–õ–ê - –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω\n"
    summary_text += f"üî¥ –°–ï–ì–û–î–ù–Ø - –ø–ª–∞—Ç–µ–∂ —Å–µ–≥–æ–¥–Ω—è\n"
    summary_text += f"üü° X–¥ - –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ X –¥–Ω–µ–π (—Å—Ä–æ—á–Ω–æ)\n"
    summary_text += f"üü† X–¥ - –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ X –¥–Ω–µ–π (–≤–Ω–∏–º–∞–Ω–∏–µ)\n"
    summary_text += f"üü¢ X–¥ - –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ X –¥–Ω–µ–π (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)\n\n"
    summary_text += f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
    
    await msg.answer(summary_text, reply_markup=kb)
    await state.set_state(EditFSM.select_machine)

@router.callback_query(EditFSM.select_machine, F.data.startswith("client_"))
async def select_client(callback: CallbackQuery, state: FSMContext):
    machine_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ
    machines = await get_all_machines()
    machine = next((m for m in machines if m.id == machine_id), None)
    
    if not machine:
        await callback.message.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
    client_info = await get_client_info(machine)
    await callback.message.answer(f"üìã **–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:**\n\n{client_info}")
    
    await state.update_data(machine_id=machine_id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="edit_price")],
        [InlineKeyboardButton(text="üìä –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —Å–¥–µ–ª–∫–∏", callback_data="edit_dealtype")],
        [InlineKeyboardButton(text="üè¢ –ò–∑–º–µ–Ω–∏—Ç—å 1–° —Å—Ç–∞—Ç—É—Å", callback_data="edit_1c")],
        [InlineKeyboardButton(text="üíµ –ò–∑–º–µ–Ω–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data="edit_rent")],
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=kb)
    await state.set_state(EditFSM.action)
    await callback.answer()

@router.callback_query(EditFSM.action, F.data == "edit_price")
async def edit_price_start(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    machines = await get_all_machines()
    machine = next((m for m in machines if m.id == data["machine_id"]), None)
    
    if machine:
        current_price = machine.full_price if machine.full_price else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        await callback.message.answer(f"üí∞ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã**\n\n"
                                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {machine.tenant}\n"
                                    f"‚òïÔ∏è –ú–æ–¥–µ–ª—å: {machine.model}\n"
                                    f"üíµ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {current_price}\n\n"
                                    f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å:")
    else:
        await callback.message.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    await state.set_state(EditFSM.new_price)
    await callback.answer()

@router.message(EditFSM.new_price)
async def edit_price_save(msg: Message, state: FSMContext):
    try:
        price = float(msg.text)
    except ValueError:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    data = await state.get_data()
    await update_machine_full_price(data["machine_id"], price)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    machines = await get_all_machines()
    machine = next((m for m in machines if m.id == data["machine_id"]), None)
    
    if machine:
        await msg.answer(f"‚úÖ **–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
                        f"üë§ –ö–ª–∏–µ–Ω—Ç: {machine.tenant}\n"
                        f"üíµ –ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price}\n\n"
                        f"üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        client_info = await get_client_info(machine)
        await msg.answer(client_info)
    else:
        await msg.answer("‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    
    await state.clear()

@router.callback_query(EditFSM.action, F.data == "edit_dealtype")
async def edit_dealtype_start(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    machines = await get_all_machines()
    machine = next((m for m in machines if m.id == data["machine_id"]), None)
    
    if machine:
        await callback.message.answer(f"üìä **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏**\n\n"
                                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {machine.tenant}\n"
                                    f"‚òïÔ∏è –ú–æ–¥–µ–ª—å: {machine.model}\n"
                                    f"üìä –¢–µ–∫—É—â–∏–π —Ç–∏–ø: {machine.deal_type}\n\n"
                                    f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —Å–¥–µ–ª–∫–∏:")
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ê—Ä–µ–Ω–¥–∞", callback_data="dealtype_rent"), InlineKeyboardButton(text="–†–∞—Å—Å—Ä–æ—á–∫–∞", callback_data="dealtype_installment")]
        ])
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —Å–¥–µ–ª–∫–∏:", reply_markup=kb)
    else:
        await callback.message.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    await state.set_state(EditFSM.new_deal_type)
    await callback.answer()

@router.callback_query(EditFSM.new_deal_type)
async def edit_dealtype_save(callback: CallbackQuery, state: FSMContext):
    new_type = "–ê—Ä–µ–Ω–¥–∞" if callback.data == "dealtype_rent" else "–†–∞—Å—Å—Ä–æ—á–∫–∞"
    data = await state.get_data()
    await update_machine_deal_type(data["machine_id"], new_type)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    machines = await get_all_machines()
    machine = next((m for m in machines if m.id == data["machine_id"]), None)
    
    if machine:
        await callback.message.answer(f"‚úÖ **–¢–∏–ø —Å–¥–µ–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
                                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {machine.tenant}\n"
                                    f"üìä –ù–æ–≤—ã–π —Ç–∏–ø: {new_type}\n\n"
                                    f"üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        client_info = await get_client_info(machine)
        await callback.message.answer(client_info)
    else:
        await callback.message.answer("‚úÖ –¢–∏–ø —Å–¥–µ–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    
    await state.clear()
    await callback.answer()

@router.callback_query(EditFSM.action, F.data == "edit_1c")
async def edit_1c_start(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    machines = await get_all_machines()
    machine = next((m for m in machines if m.id == data["machine_id"]), None)
    
    if machine:
        current_1c = "‚úÖ –í 1–°" if machine.in_1C else "‚ùå –ë–µ–∑ 1–°"
        await callback.message.answer(f"üè¢ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ 1–°**\n\n"
                                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {machine.tenant}\n"
                                    f"‚òïÔ∏è –ú–æ–¥–µ–ª—å: {machine.model}\n"
                                    f"üè¢ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_1c}\n\n"
                                    f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å 1–°:")
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í 1–°", callback_data="1c_true"), InlineKeyboardButton(text="‚ùå –ë–µ–∑ 1–°", callback_data="1c_false")]
        ])
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å 1–°:", reply_markup=kb)
    else:
        await callback.message.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    await state.set_state(EditFSM.new_1c)
    await callback.answer()

@router.callback_query(EditFSM.new_1c)
async def edit_1c_save(callback: CallbackQuery, state: FSMContext):
    new_1c = callback.data == "1c_true"
    data = await state.get_data()
    await update_machine_1c(data["machine_id"], new_1c)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    machines = await get_all_machines()
    machine = next((m for m in machines if m.id == data["machine_id"]), None)
    
    if machine:
        new_1c_text = "‚úÖ –í 1–°" if new_1c else "‚ùå –ë–µ–∑ 1–°"
        await callback.message.answer(f"‚úÖ **–°—Ç–∞—Ç—É—Å 1–° —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
                                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {machine.tenant}\n"
                                    f"üè¢ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_1c_text}\n\n"
                                    f"üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        client_info = await get_client_info(machine)
        await callback.message.answer(client_info)
    else:
        await callback.message.answer("‚úÖ –°—Ç–∞—Ç—É—Å 1–° –æ–±–Ω–æ–≤–ª–µ–Ω!")
    
    await state.clear()
    await callback.answer()

@router.callback_query(EditFSM.action, F.data == "edit_rent")
async def edit_rent_start(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    machines = await get_all_machines()
    machine = next((m for m in machines if m.id == data["machine_id"]), None)
    
    if machine:
        await callback.message.answer(f"üíµ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É–º–º—ã –∞—Ä–µ–Ω–¥—ã**\n\n"
                                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {machine.tenant}\n"
                                    f"‚òïÔ∏è –ú–æ–¥–µ–ª—å: {machine.model}\n"
                                    f"üí∞ –¢–µ–∫—É—â–∞—è –∞—Ä–µ–Ω–¥–∞: {machine.rent_price}\n\n"
                                    f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –∞—Ä–µ–Ω–¥—ã:")
    else:
        await callback.message.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    await state.set_state(EditFSM.new_rent)
    await callback.answer()

@router.message(EditFSM.new_rent)
async def edit_rent_save(msg: Message, state: FSMContext):
    try:
        rent = float(msg.text)
    except ValueError:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    data = await state.get_data()
    await update_machine_rent_price(data["machine_id"], rent)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    machines = await get_all_machines()
    machine = next((m for m in machines if m.id == data["machine_id"]), None)
    
    if machine:
        await msg.answer(f"‚úÖ **–°—É–º–º–∞ –∞—Ä–µ–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
                        f"üë§ –ö–ª–∏–µ–Ω—Ç: {machine.tenant}\n"
                        f"üí∞ –ù–æ–≤–∞—è –∞—Ä–µ–Ω–¥–∞: {rent}\n\n"
                        f"üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        client_info = await get_client_info(machine)
        await msg.answer(client_info)
    else:
        await msg.answer("‚úÖ –ê—Ä–µ–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    
    await state.clear() 