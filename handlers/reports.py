from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, BufferedInputFile
from aiogram.filters import Command
from db import get_all_machines, get_payments_by_machine, get_all_machine_models
from utils.excel import generate_excel_report
from utils.plots import plot_payments_dynamic, plot_top_models, plot_expected_payments, plot_overdue
import asyncio

router = Router()

# –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel-–æ—Ç—á–µ—Ç–æ–≤ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ 

@router.message(Command("report"))
async def send_excel_report(msg: Message):
    machines = await get_all_machines()
    models = {m.name: m for m in await get_all_machine_models()}
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel - –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã
    machines_data = []
    payments_data = []
    for m in machines:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if m.status == "buyout":
            status = "–ó–∞–∫—Ä—ã—Ç–∞ (–≤—ã–∫—É–ø)"
        elif m.status == "returned":
            status = "–ó–∞–∫—Ä—ã—Ç–∞ (–≤–æ–∑–≤—Ä–∞—Ç)"
        elif m.status == "damaged":
            status = "–ó–∞–∫—Ä—ã—Ç–∞ (–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞)"
        else:
            status = "–û—Ç–∫—Ä—ã—Ç–∞"
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        full_price = models[m.model].full_price if m.model in models else 0
        # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        all_payments = await get_payments_by_machine(m.id)
        total_paid = sum(p.amount for p in all_payments)
        remain = max(full_price - total_paid, 0)
        machines_data.append({
            "–î–∞—Ç–∞": m.payment_date,
            "–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä": m.tenant,
            "–ú–æ–¥–µ–ª—å": m.model,
            "–®—Ç—Ä–∏—Ö-–∫–æ–¥": m.barcode,
            "–û–ø–ª–∞—Ç–∞": m.rent_price,
            "–ó–∞–ª–æ–≥": m.deposit,
            "–¢–µ–ª–µ—Ñ–æ–Ω": m.phone,
            "1–°_—Å—Ç–∞—Ç—É—Å": m.in_1C,
            "–°—Ç–∞—Ç—É—Å": status,
            "–¢–∏–ø —Å–¥–µ–ª–∫–∏": m.deal_type,
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": m.comment or "",
            "–û—Å—Ç–∞—Ç–æ–∫ –∫ –≤—ã–ø–ª–∞—Ç–µ": remain,
        })
        # –ü–ª–∞—Ç–µ–∂–∏ –ø–æ –º–∞—à–∏–Ω–µ
        for p in all_payments:
            remain_p = max(full_price - sum(x.amount for x in all_payments if x.payment_date <= p.payment_date), 0)
            payments_data.append({
                "–ú–æ–¥–µ–ª—å –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã": m.model,
                "–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä": p.tenant,
                "–°—É–º–º–∞": p.amount,
                "–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞": p.payment_date,
                "–¢–∏–ø": "–î–µ–ø–æ–∑–∏—Ç" if p.is_deposit else ("–í—ã–∫—É–ø" if p.is_buyout else "–ê—Ä–µ–Ω–¥–∞"),
                "–û—Å—Ç–∞—Ç–æ–∫ –∫ –¥–æ–ø–ª–∞—Ç–µ": remain_p,
            })
    excel = generate_excel_report(machines_data, payments_data)
    excel.seek(0)
    await msg.answer_document(BufferedInputFile(excel.read(), filename="coffee_report.xlsx"))

@router.message(Command("plot"))
async def choose_plot(msg: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="plot_dynamic")],
        [InlineKeyboardButton(text="üèÜ –¢–æ–ø –º–æ–¥–µ–ª–µ–π", callback_data="plot_top")],
        [InlineKeyboardButton(text="üí∞ –û–∂–∏–¥–∞–µ–º—ã–µ –ø–ª–∞—Ç–µ–∂–∏", callback_data="plot_expected")],
        [InlineKeyboardButton(text="‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–∫–∏", callback_data="plot_overdue")],
    ])
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:", reply_markup=kb)

@router.callback_query(F.data.startswith("plot_"))
async def send_plot(callback: CallbackQuery):
    machines = await get_all_machines()
    if callback.data == "plot_dynamic":
        # –ü—Ä–∏–º–µ—Ä: –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
        from collections import Counter
        months = [m.payment_date.strftime('%Y-%m') for m in machines]
        sums = Counter(months)
        data = [{"month": k, "sum": v} for k, v in sums.items()]
        img = await plot_payments_dynamic(data)
    elif callback.data == "plot_top":
        from collections import Counter
        models = [m.model for m in machines]
        counts = Counter(models)
        data = [{"model": k, "count": v} for k, v in counts.items()]
        img = await plot_top_models(data)
    elif callback.data == "plot_expected":
        tenants = {}
        for m in machines:
            tenants[m.tenant] = tenants.get(m.tenant, 0) + m.rent_price
        data = [{"tenant": k, "sum": v} for k, v in tenants.items()]
        img = await plot_expected_payments(data)
    elif callback.data == "plot_overdue":
        # –ü—Ä–æ—Å—Ä–æ—á–∫–∏: –µ—Å–ª–∏ –¥–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ < —Å–µ–≥–æ–¥–Ω—è
        from datetime import date
        overdue = []
        for m in machines:
            if m.payment_date < date.today():
                overdue.append({"tenant": m.tenant, "days": (date.today() - m.payment_date).days})
        img = await plot_overdue(overdue)
    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞")
        return
    
    if img:
        img.seek(0)
        await callback.message.answer_photo(BufferedInputFile(img.read(), filename="plot.png"), caption="–í–∞—à –≥—Ä–∞—Ñ–∏–∫")
    await callback.answer()

@router.message(Command("summary"))
async def send_summary(msg: Message):
    machines = await get_all_machines()
    from datetime import date
    overdue = [m for m in machines if m.payment_date < date.today()]
    one_month_sum = sum(m.rent_price for m in machines if m.payment_date.month == date.today().month and m.payment_date.year == date.today().year)

    m_act = [m for m in machines if m.status == "active"]
    text = (f"–í—Å–µ–≥–æ –∫–æ—Ñ–µ–º–∞—à–∏–Ω –≤ –∞—Ä–µ–Ω–¥–µ: {len(m_act)}\n–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: {len(overdue)}"
            f"\n–°—É–º–º–∞ –¥–µ–Ω–µ–≥ –≤ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö: {sum(m.deposit for m in m_act if m.deposit)}"
            f"\n–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü: {one_month_sum}")
    await msg.answer(text) 