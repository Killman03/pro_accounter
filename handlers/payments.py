from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from db import get_all_machines, add_payment
from datetime import date, timedelta
from sqlalchemy import select, update
from sqlalchemy.ext.asyncio import AsyncSession
from db import AsyncSessionLocal
from models import CoffeeMachineORM
from db import get_machine_model_by_name


router = Router()

class AddPayment(StatesGroup):
    select_machine = State()
    payment_type = State()
    amount = State()
    payment_date = State()


@router.message(Command("payments"))
async def start_payments(msg: Message, state: FSMContext):
    machines = await get_all_machines()
    active_machines = [m for m in machines if m.status == "active"]

    if not active_machines:
        await msg.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ñ–µ–º–∞—à–∏–Ω –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π.")
        return

    kb_buttons = []
    for m in active_machines:
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Ü–µ–Ω—ã
        machine_model = await get_machine_model_by_name(m.model)
        full_price = machine_model.full_price if machine_model else 0

        # –°—É–º–º–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–∏—Å–∫–ª—é—á–∞—è –¥–µ–ø–æ–∑–∏—Ç –∏ –≤—ã–∫—É–ø)
        payments_sum = sum(
            p.amount for p in m.payments_rel
            if not p.is_deposit and not p.is_buyout
        )

        # –†–∞—Å—á–µ—Ç: —Ü–µ–Ω–∞ - –¥–µ–ø–æ–∑–∏—Ç - –≤—ã–ø–ª–∞—Ç—ã
        remaining = full_price - m.deposit - payments_sum

        kb_buttons.append(
            [InlineKeyboardButton(
                text=f"{m.tenant} - {m.model} - –û—Å—Ç–∞—Ç–æ–∫: {remaining:.2f}",
                callback_data=f"machine_{m.id}"
            )]
        )

    kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:", reply_markup=kb)
    await state.set_state(AddPayment.select_machine)

@router.callback_query(AddPayment.select_machine, F.data.startswith("machine_"))
async def select_machine_for_payment(callback: CallbackQuery, state: FSMContext):
    machine_id = int(callback.data.split("_")[1])
    await state.update_data(machine_id=machine_id)
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ê—Ä–µ–Ω–¥–Ω–∞—è –ø–ª–∞—Ç–∞", callback_data="type_rent")],
        [InlineKeyboardButton(text="üí≥ –î–µ–ø–æ–∑–∏—Ç", callback_data="type_deposit")],
        [InlineKeyboardButton(text="üõí –í—ã–∫—É–ø", callback_data="type_buyout")],
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞:", reply_markup=kb)
    await state.set_state(AddPayment.payment_type)
    await callback.answer()

@router.callback_query(AddPayment.payment_type, F.data.startswith("type_"))
async def select_payment_type(callback: CallbackQuery, state: FSMContext):
    payment_type = callback.data.split("_")[1]
    await state.update_data(payment_type=payment_type)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    data = await state.get_data()
    machines = await get_all_machines()
    machine = next((m for m in machines if m.id == data["machine_id"]), None)
    
    if payment_type == "rent":
        default_amount = machine.rent_price
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∞—Ä–µ–Ω–¥–Ω–æ–π –ø–ª–∞—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {default_amount}) –∏–ª–∏ '.' –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")
    elif payment_type == "deposit":
        default_amount = machine.deposit
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {default_amount}) –∏–ª–∏ '.' –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")
    else:  # buyout
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–∫—É–ø–∞:")
    
    await state.set_state(AddPayment.amount)
    await callback.answer()

@router.message(AddPayment.amount)
async def input_payment_amount(msg: Message, state: FSMContext):
    if msg.text == '.':
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Å—É–º–º—É
        data = await state.get_data()
        machines = await get_all_machines()
        machine = next((m for m in machines if m.id == data["machine_id"]), None)
        
        if data["payment_type"] == "rent":
            amount = machine.rent_price
        elif data["payment_type"] == "deposit":
            amount = machine.deposit
        else:  # buyout
            await msg.answer("–î–ª—è –≤—ã–∫—É–ø–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—É–º–º—É")
            return
        
        await state.update_data(amount=amount)
    else:
        try:
            amount = float(msg.text)
            await state.update_data(amount=amount)
        except ValueError:
            await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ) –∏–ª–∏ '.' –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return
    
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–ª–∞—Ç–µ–∂–∞ (YYYY-MM-DD) –∏–ª–∏ '.' (—Ç–æ—á–∫—É):")
    await state.set_state(AddPayment.payment_date)

@router.message(AddPayment.payment_date)
async def input_payment_date(msg: Message, state: FSMContext):
    try:
        if msg.text.lower() == ".":
            payment_date = date.today() + timedelta(days=0)  # –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
        else:
            payment_date = date.fromisoformat(msg.text)
    except ValueError:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –∏–ª–∏ '.' (—Ç–æ—á–∫—É) –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã")
        return
    
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
    payment_data = {
        "machine_id": data["machine_id"],
        "tenant": "",  # –ü–æ–ª—É—á–∏–º –∏–∑ –º–∞—à–∏–Ω—ã
        "amount": data["amount"],
        "payment_date": payment_date,
        "is_deposit": data["payment_type"] == "deposit",
        "is_buyout": data["payment_type"] == "buyout"
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã –¥–ª—è tenant
    machines = await get_all_machines()
    machine = next((m for m in machines if m.id == data["machine_id"]), None)
    if machine:
        payment_data["tenant"] = machine.tenant
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—à–∏–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–ª–∞—Ç–µ–∂–∞
        async with AsyncSessionLocal() as session:
            if data["payment_type"] == "buyout":
                # –í—ã–∫—É–ø - –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
                await session.execute(
                    update(CoffeeMachineORM)
                    .where(CoffeeMachineORM.id == data["machine_id"])
                    .values(
                        status="buyout",
                        buyout=True,
                        buyout_date=payment_date
                    )
                )
            elif data["payment_type"] == "rent":
                # –ê—Ä–µ–Ω–¥–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                next_payment = payment_date + timedelta(days=30)
                await session.execute(
                    update(CoffeeMachineORM)
                    .where(CoffeeMachineORM.id == data["machine_id"])
                    .values(payment_date=next_payment)
                )
            
            await session.commit()
    
    await add_payment(payment_data)
    
    await msg.answer(f"–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                    f"–¢–∏–ø: {data['payment_type']}\n"
                    f"–°—É–º–º–∞: {data['amount']}\n"
                    f"–î–∞—Ç–∞: {payment_date}")
    
    await state.clear() 